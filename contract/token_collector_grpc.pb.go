// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.1
// source: contract/token_collector.proto

package token_collector

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TokenCollectorClient is the client API for TokenCollector service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TokenCollectorClient interface {
	InsertToken(ctx context.Context, in *InsertTokenRequest, opts ...grpc.CallOption) (*InsertTokenReply, error)
}

type tokenCollectorClient struct {
	cc grpc.ClientConnInterface
}

func NewTokenCollectorClient(cc grpc.ClientConnInterface) TokenCollectorClient {
	return &tokenCollectorClient{cc}
}

func (c *tokenCollectorClient) InsertToken(ctx context.Context, in *InsertTokenRequest, opts ...grpc.CallOption) (*InsertTokenReply, error) {
	out := new(InsertTokenReply)
	err := c.cc.Invoke(ctx, "/TokenCollector/InsertToken", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenCollectorServer is the server API for TokenCollector service.
// All implementations must embed UnimplementedTokenCollectorServer
// for forward compatibility
type TokenCollectorServer interface {
	InsertToken(context.Context, *InsertTokenRequest) (*InsertTokenReply, error)
	mustEmbedUnimplementedTokenCollectorServer()
}

// UnimplementedTokenCollectorServer must be embedded to have forward compatible implementations.
type UnimplementedTokenCollectorServer struct {
}

func (UnimplementedTokenCollectorServer) InsertToken(context.Context, *InsertTokenRequest) (*InsertTokenReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InsertToken not implemented")
}
func (UnimplementedTokenCollectorServer) mustEmbedUnimplementedTokenCollectorServer() {}

// UnsafeTokenCollectorServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TokenCollectorServer will
// result in compilation errors.
type UnsafeTokenCollectorServer interface {
	mustEmbedUnimplementedTokenCollectorServer()
}

func RegisterTokenCollectorServer(s grpc.ServiceRegistrar, srv TokenCollectorServer) {
	s.RegisterService(&TokenCollector_ServiceDesc, srv)
}

func _TokenCollector_InsertToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InsertTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenCollectorServer).InsertToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TokenCollector/InsertToken",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenCollectorServer).InsertToken(ctx, req.(*InsertTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TokenCollector_ServiceDesc is the grpc.ServiceDesc for TokenCollector service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TokenCollector_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TokenCollector",
	HandlerType: (*TokenCollectorServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InsertToken",
			Handler:    _TokenCollector_InsertToken_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "contract/token_collector.proto",
}
